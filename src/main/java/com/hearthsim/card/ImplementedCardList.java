package com.hearthsim.card;

import com.hearthsim.card.minion.concrete.*;
import com.hearthsim.card.spellcard.concrete.*;
import com.hearthsim.card.weapon.concrete.ArcaniteReaper;
import com.hearthsim.card.weapon.concrete.AssassinsBlade;
import com.hearthsim.card.weapon.concrete.FieryWarAxe;
import com.hearthsim.card.weapon.concrete.LightsJustice;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
/**
 * A list of all implemented cards
 *
 * WARNING!!!!!
 * This class is auto-generated by generateImplementedCardList.py.
 * Do not modify directly.
 *
 **/
public class ImplementedCardList {
    private ArrayList<ImplementedCard> list_;
    private Map<Class<?>, ImplementedCard> map_;
    public class ImplementedCard implements Comparable<ImplementedCard> {

        public final Class<?> cardClass_;
        public final String name_;
        public final String type_;
        public final String charClass_;
        public final String rarity_;
        public final String text_;
        public final int mana_;
        public final int attack_;
        public final int health_;

        public ImplementedCard(Class<?> cardClass, String name, String type, String charClass, String rarity, String text, int mana, int attack, int health) {
            cardClass_ = cardClass;
            name_ = name;
            type_ = type;
            charClass_ = charClass;
            rarity_ = rarity;
            text_ = text;
            mana_ = mana;
            attack_ = attack;
            health_ = health;
        }

        @Override
        public int compareTo(ImplementedCard o) {
            int result = Integer.compare(this.mana_, o.mana_);
            if (result == 0) {
               result = this.name_.compareTo(o.name_);
            }
            return result;
        }

    }

    public ImplementedCardList() {
        list_ = new ArrayList<ImplementedCard>();
        map_ = new HashMap<Class<?>, ImplementedCard>();

        {
            ImplementedCard card = new ImplementedCard(Abomination.class, "Abomination", "minion", "neutral", "rare", "Taunt. Deathrattle Deal 2 damage to ALL characters", 5, 4, 4);
            list_.add(card);
            map_.put(Abomination.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AbusiveSergeant.class, "Abusive Sergeant", "minion", "neutral", "common", "Battlecry Give a minion +2 Attack this turn", 1, 2, 1);
            list_.add(card);
            map_.put(AbusiveSergeant.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AcidicSwampOoze.class, "Acidic Swamp Ooze", "minion", "neutral", "free", "Battlecry Destroy your opponents weapon", 2, 3, 2);
            list_.add(card);
            map_.put(AcidicSwampOoze.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AcolyteOfPain.class, "Acolyte of Pain", "minion", "neutral", "common", "Whenever this minion takes damage, draw a card", 3, 1, 3);
            list_.add(card);
            map_.put(AcolyteOfPain.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AlAkirTheWindlord.class, "AlAkir the Windlord", "minion", "shaman", "legendary", "Windfury, Charge, Divine Shield, Taunt", 8, 3, 5);
            list_.add(card);
            map_.put(AlAkirTheWindlord.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AldorPeacekeeper.class, "Aldor Peacekeeper", "minion", "paladin", "rare", "Battlecry Change an enemy minions Attack to 1", 3, 3, 3);
            list_.add(card);
            map_.put(AldorPeacekeeper.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Alexstrasza.class, "Alexstrasza", "minion", "neutral", "legendary", "Battlecry Set a heros remaining Health to 15", 9, 8, 8);
            list_.add(card);
            map_.put(Alexstrasza.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AmaniBerserker.class, "Amani Berserker", "minion", "neutral", "common", "Enrage +3 Attack", 2, 2, 3);
            list_.add(card);
            map_.put(AmaniBerserker.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AncestralHealing.class, "Ancestral Healing", "spell", "shaman", "free", "Restore a minion to full Health and give it Taunt", 0, -1, -1);
            list_.add(card);
            map_.put(AncestralHealing.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AncestralSpirit.class, "Ancestral Spirit", "spell", "shaman", "rare", "Give a minion Deathrattle Resummon this minion", 2, -1, -1);
            list_.add(card);
            map_.put(AncestralSpirit.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AncientOfLore.class, "Ancient of Lore", "minion", "neutral", "epic", "Choose One  Draw 2 cards; or Restore 5 Health", 7, 5, 5);
            list_.add(card);
            map_.put(AncientOfLore.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AncientOfWar.class, "Ancient of War", "minion", "neutral", "epic", "Choose One  Taunt and +5 Health; or +5 Attack", 7, 5, 5);
            list_.add(card);
            map_.put(AncientOfWar.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AngryChicken.class, "Angry Chicken", "minion", "neutral", "rare", "Enrage +5 Attack", 1, 1, 1);
            list_.add(card);
            map_.put(AngryChicken.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArcaneExplosion.class, "Arcane Explosion", "spell", "mage", "free", "Deal 1 damage to all enemy minions", 2, -1, -1);
            list_.add(card);
            map_.put(ArcaneExplosion.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArcaneGolem.class, "Arcane Golem", "minion", "neutral", "rare", "Charge. Battlecry Give your opponent a Mana Crystal", 3, 4, 2);
            list_.add(card);
            map_.put(ArcaneGolem.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArcaneIntellect.class, "Arcane Intellect", "spell", "mage", "free", "Draw 2 cards", 3, -1, -1);
            list_.add(card);
            map_.put(ArcaneIntellect.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArcaneShot.class, "Arcane Shot", "spell", "hunter", "free", "Deal 2 damage", 1, -1, -1);
            list_.add(card);
            map_.put(ArcaneShot.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArcaniteReaper.class, "Arcanite Reaper", "weapon", "warrior", "free", "", 5, 5, -1);
            list_.add(card);
            map_.put(ArcaniteReaper.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Archmage.class, "Archmage", "minion", "neutral", "free", "Spell Damage +1", 6, 4, 7);
            list_.add(card);
            map_.put(Archmage.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArchmageAntonidas.class, "Archmage Antonidas", "minion", "mage", "legendary", "Whenever you cast a spell, put a Fireball spell into your hand", 7, 5, 7);
            list_.add(card);
            map_.put(ArchmageAntonidas.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArgentCommander.class, "Argent Commander", "minion", "neutral", "rare", "Charge, Divine Shield", 6, 4, 2);
            list_.add(card);
            map_.put(ArgentCommander.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArgentProtector.class, "Argent Protector", "minion", "paladin", "common", "Battlecry Give a friendly minion Divine Shield", 2, 2, 2);
            list_.add(card);
            map_.put(ArgentProtector.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ArgentSquire.class, "Argent Squire", "minion", "neutral", "common", "Divine Shield", 1, 1, 1);
            list_.add(card);
            map_.put(ArgentSquire.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Armorsmith.class, "Armorsmith", "minion", "warrior", "rare", "Whenever a friendly minion takes damage, gain 1 Armor", 2, 1, 4);
            list_.add(card);
            map_.put(Armorsmith.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AssassinsBlade.class, "Assassins Blade", "weapon", "rogue", "free", "", 5, 3, -1);
            list_.add(card);
            map_.put(AssassinsBlade.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Assassinate.class, "Assassinate", "spell", "rogue", "free", "Destroy an enemy minion", 5, -1, -1);
            list_.add(card);
            map_.put(Assassinate.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(AzureDrake.class, "Azure Drake", "minion", "neutral", "rare", "Spell Damage +1.Battlecry Draw a card", 5, 4, 4);
            list_.add(card);
            map_.put(AzureDrake.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Backstab.class, "Backstab", "spell", "rogue", "free", "Deal 2 damage to an undamaged minion", 0, -1, -1);
            list_.add(card);
            map_.put(Backstab.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BigGameHunter.class, "Big Game Hunter", "minion", "neutral", "epic", "Battlecry Destroy a minion with an Attack of 7 or more", 3, 4, 2);
            list_.add(card);
            map_.put(BigGameHunter.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BlessingOfKings.class, "Blessing of Kings", "spell", "paladin", "free", "Give a minion +4/+4. (+4 Attack/+4 Health)", 4, -1, -1);
            list_.add(card);
            map_.put(BlessingOfKings.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BlessingOfMight.class, "Blessing of Might", "spell", "paladin", "free", "Give a minion +3 Attack", 1, -1, -1);
            list_.add(card);
            map_.put(BlessingOfMight.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BloodfenRaptor.class, "Bloodfen Raptor", "minion", "neutral", "free", "", 2, 3, 2);
            list_.add(card);
            map_.put(BloodfenRaptor.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Bloodlust.class, "Bloodlust", "spell", "shaman", "free", "Give your minions +3 Attack this turn", 5, -1, -1);
            list_.add(card);
            map_.put(Bloodlust.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BloodmageThalnos.class, "Bloodmage Thalnos", "minion", "neutral", "legendary", "Spell Damage +1. Deathrattle Draw a card", 2, 1, 1);
            list_.add(card);
            map_.put(BloodmageThalnos.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BluegillWarrior.class, "Bluegill Warrior", "minion", "neutral", "free", "Charge", 2, 2, 1);
            list_.add(card);
            map_.put(BluegillWarrior.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BootyBayBodyguard.class, "Booty Bay Bodyguard", "minion", "neutral", "free", "Taunt", 5, 5, 4);
            list_.add(card);
            map_.put(BootyBayBodyguard.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(BoulderfistOgre.class, "Boulderfist Ogre", "minion", "neutral", "free", "", 6, 6, 7);
            list_.add(card);
            map_.put(BoulderfistOgre.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(CairneBloodhoof.class, "Cairne Bloodhoof", "minion", "neutral", "legendary", "Deathrattle Summon a 4/5 Baine Bloodhoof", 6, 4, 5);
            list_.add(card);
            map_.put(CairneBloodhoof.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Charge.class, "Charge", "spell", "warrior", "free", "Give a friendly minion +2 Attack and Charge", 3, -1, -1);
            list_.add(card);
            map_.put(Charge.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ChillwindYeti.class, "Chillwind Yeti", "minion", "neutral", "free", "", 4, 4, 5);
            list_.add(card);
            map_.put(ChillwindYeti.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(CircleOfHealing.class, "Circle of Healing", "spell", "priest", "common", "Restore 4 Health to ALL minions", 0, -1, -1);
            list_.add(card);
            map_.put(CircleOfHealing.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Claw.class, "Claw", "spell", "neutral", "free", "Give your hero +2 Attack this turn and 2 Armor", 1, -1, -1);
            list_.add(card);
            map_.put(Claw.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ColdlightOracle.class, "Coldlight Oracle", "minion", "neutral", "rare", "Battlecry Each player draws 2 cards", 3, 2, 2);
            list_.add(card);
            map_.put(ColdlightOracle.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Consecration.class, "Consecration", "spell", "paladin", "free", "Deal 2 damage to all enemies", 4, -1, -1);
            list_.add(card);
            map_.put(Consecration.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(CoreHound.class, "Core Hound", "minion", "neutral", "free", "", 7, 9, 5);
            list_.add(card);
            map_.put(CoreHound.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Corruption.class, "Corruption", "spell", "warlock", "free", "Choose an enemy minion. At the start of your turn, destroy it", 1, -1, -1);
            list_.add(card);
            map_.put(Corruption.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(CrazedAlchemist.class, "Crazed Alchemist", "minion", "neutral", "rare", "Battlecry Swap the Attack and Health of a minion", 2, 2, 2);
            list_.add(card);
            map_.put(CrazedAlchemist.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(CruelTaskmaster.class, "Cruel Taskmaster", "minion", "warrior", "common", "Battlecry Deal 1 damage to a minion and give it +2 Attack", 2, 2, 2);
            list_.add(card);
            map_.put(CruelTaskmaster.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DalaranMage.class, "Dalaran Mage", "minion", "neutral", "free", "Spell Damage +1", 3, 1, 4);
            list_.add(card);
            map_.put(DalaranMage.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DarkscaleHealer.class, "Darkscale Healer", "minion", "neutral", "free", "Battlecry Restore 2 Health to all friendly characters", 5, 4, 5);
            list_.add(card);
            map_.put(DarkscaleHealer.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DeadlyPoison.class, "Deadly Poison", "spell", "rogue", "free", "Give your weapon +2 Attack", 1, -1, -1);
            list_.add(card);
            map_.put(DeadlyPoison.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DefenderOfArgus.class, "Defender of Argus", "minion", "neutral", "rare", "Battlecry Give adjacent minions +1/+1 and Taunt", 4, 2, 3);
            list_.add(card);
            map_.put(DefenderOfArgus.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DivineSpirit.class, "Divine Spirit", "spell", "priest", "free", "Double a minions Health", 2, -1, -1);
            list_.add(card);
            map_.put(DivineSpirit.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DragonlingMechanic.class, "Dragonling Mechanic", "minion", "neutral", "free", "Battlecry Summon a 2/1 Mechanical Dragonling", 4, 2, 4);
            list_.add(card);
            map_.put(DragonlingMechanic.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DrainLife.class, "Drain Life", "spell", "warlock", "free", "Deal 2 damage. Restore 2 Health to your hero", 3, -1, -1);
            list_.add(card);
            map_.put(DrainLife.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DreadInfernal.class, "Dread Infernal", "minion", "warlock", "free", "Battlecry Deal 1 damage to ALL other characters", 6, 6, 6);
            list_.add(card);
            map_.put(DreadInfernal.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(DustDevil.class, "Dust Devil", "minion", "shaman", "common", "Windfury. Overload (2)", 1, 3, 1);
            list_.add(card);
            map_.put(DustDevil.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(EarthElemental.class, "Earth Elemental", "minion", "shaman", "epic", "Taunt. Overload (3)", 5, 7, 8);
            list_.add(card);
            map_.put(EarthElemental.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ElvenArcher.class, "Elven Archer", "minion", "neutral", "free", "Battlecry Deal 1 damage", 1, 1, 1);
            list_.add(card);
            map_.put(ElvenArcher.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Execute.class, "Execute", "spell", "warrior", "free", "Destroy a damaged enemy minion", 1, -1, -1);
            list_.add(card);
            map_.put(Execute.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FanOfKnives.class, "Fan of Knives", "spell", "rogue", "free", "Deal 1 damage to all enemy minions. Draw a card", 3, -1, -1);
            list_.add(card);
            map_.put(FanOfKnives.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FenCreeper.class, "Fen Creeper", "minion", "neutral", "common", "Taunt", 5, 3, 6);
            list_.add(card);
            map_.put(FenCreeper.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FieryWarAxe.class, "Fiery War Axe", "weapon", "warrior", "free", "", 2, 3, -1);
            list_.add(card);
            map_.put(FieryWarAxe.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FireElemental.class, "Fire Elemental", "minion", "shaman", "free", "Battlecry Deal 3 damage", 6, 6, 5);
            list_.add(card);
            map_.put(FireElemental.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Fireball.class, "Fireball", "spell", "mage", "free", "Deal 6 damage", 4, -1, -1);
            list_.add(card);
            map_.put(Fireball.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Flamestrike.class, "Flamestrike", "spell", "mage", "free", "Deal 4 damage to all enemy minions", 7, -1, -1);
            list_.add(card);
            map_.put(Flamestrike.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FlesheatingGhoul.class, "Flesheating Ghoul", "minion", "neutral", "common", "Whenever a minion dies, gain +1 Attack", 3, 2, 3);
            list_.add(card);
            map_.put(FlesheatingGhoul.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FrostNova.class, "Frost Nova", "spell", "mage", "free", "Freeze all enemy minions", 3, -1, -1);
            list_.add(card);
            map_.put(FrostNova.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FrostShock.class, "Frost Shock", "spell", "shaman", "free", "Deal 1 damage to an enemy character and Freeze it", 1, -1, -1);
            list_.add(card);
            map_.put(FrostShock.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Frostbolt.class, "Frostbolt", "spell", "mage", "free", "Deal 3 damage to a character and Freeze it", 2, -1, -1);
            list_.add(card);
            map_.put(Frostbolt.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FrostwolfGrunt.class, "Frostwolf Grunt", "minion", "neutral", "free", "Taunt", 2, 2, 2);
            list_.add(card);
            map_.put(FrostwolfGrunt.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(FrostwolfWarlord.class, "Frostwolf Warlord", "minion", "neutral", "free", "Battlecry Gain +1/+1 for each other friendly minion on the battlefield", 5, 4, 4);
            list_.add(card);
            map_.put(FrostwolfWarlord.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(GnomishInventor.class, "Gnomish Inventor", "minion", "neutral", "free", "Battlecry Draw a card", 4, 2, 4);
            list_.add(card);
            map_.put(GnomishInventor.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(GoldshireFootman.class, "Goldshire Footman", "minion", "neutral", "free", "Taunt", 1, 1, 2);
            list_.add(card);
            map_.put(GoldshireFootman.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(GrimscaleOracle.class, "Grimscale Oracle", "minion", "neutral", "free", "ALL other Murlocs have +1 Attack", 1, 1, 1);
            list_.add(card);
            map_.put(GrimscaleOracle.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(GrommashHellscream.class, "Grommash Hellscream", "minion", "warrior", "legendary", "Charge. Enrage +6 Attack", 8, 4, 9);
            list_.add(card);
            map_.put(GrommashHellscream.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(GuardianOfKings.class, "Guardian of Kings", "minion", "paladin", "free", "Battlecry Restore 6 Health to your hero", 7, 5, 6);
            list_.add(card);
            map_.put(GuardianOfKings.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(GurubashiBerserker.class, "Gurubashi Berserker", "minion", "neutral", "free", "Whenever this minion takes damage, gain +3 Attack", 5, 2, 7);
            list_.add(card);
            map_.put(GurubashiBerserker.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HammerOfWrath.class, "Hammer of Wrath", "spell", "paladin", "free", "Deal 3 damage. Draw a card", 4, -1, -1);
            list_.add(card);
            map_.put(HammerOfWrath.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HandOfProtection.class, "Hand of Protection", "spell", "paladin", "free", "Give a minion Divine Shield", 1, -1, -1);
            list_.add(card);
            map_.put(HandOfProtection.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HarvestGolem.class, "Harvest Golem", "minion", "neutral", "common", "Deathrattle Summon a 2/1 Damaged Golem", 3, 2, 3);
            list_.add(card);
            map_.put(HarvestGolem.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HealingTouch.class, "Healing Touch", "spell", "neutral", "free", "Restore 8 Health", 3, -1, -1);
            list_.add(card);
            map_.put(HealingTouch.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Hellfire.class, "Hellfire", "spell", "warlock", "free", "Deal 3 damage to ALL characters", 4, -1, -1);
            list_.add(card);
            map_.put(Hellfire.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HeroicStrike.class, "Heroic Strike", "spell", "warrior", "free", "Give your hero +4 Attack this turn", 2, -1, -1);
            list_.add(card);
            map_.put(HeroicStrike.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Hex.class, "Hex", "spell", "shaman", "free", "Transform a minion into a 0/1 Frog with Taunt", 3, -1, -1);
            list_.add(card);
            map_.put(Hex.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HolyFire.class, "Holy Fire", "spell", "priest", "rare", "Deal 5 damage. Restore 5 Health to your hero", 6, -1, -1);
            list_.add(card);
            map_.put(HolyFire.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HolyLight.class, "Holy Light", "spell", "paladin", "free", "Restore 6 Health", 2, -1, -1);
            list_.add(card);
            map_.put(HolyLight.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HolyNova.class, "Holy Nova", "spell", "priest", "free", "Deal 2 damage to all enemies. Restore 2 Health to all friendly characters", 5, -1, -1);
            list_.add(card);
            map_.put(HolyNova.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HolySmite.class, "Holy Smite", "spell", "priest", "free", "Deal 2 damage", 1, -1, -1);
            list_.add(card);
            map_.put(HolySmite.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Houndmaster.class, "Houndmaster", "minion", "hunter", "free", "Battlecry Give a friendly Beast +2/+2 and Taunt", 4, 4, 3);
            list_.add(card);
            map_.put(Houndmaster.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Humility.class, "Humility", "spell", "paladin", "free", "Change a minions Attack to 1", 1, -1, -1);
            list_.add(card);
            map_.put(Humility.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(HuntersMark.class, "Hunters Mark", "spell", "hunter", "free", "Change a minions Health to 1", 0, -1, -1);
            list_.add(card);
            map_.put(HuntersMark.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(InjuredBlademaster.class, "Injured Blademaster", "minion", "neutral", "rare", "Battlecry Deal 4 damage to HIMSELF", 3, 4, 7);
            list_.add(card);
            map_.put(InjuredBlademaster.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(InnerFire.class, "Inner Fire", "spell", "priest", "common", "Change a minions Attack to be equal to its Health", 1, -1, -1);
            list_.add(card);
            map_.put(InnerFire.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(InnerRage.class, "Inner Rage", "spell", "warrior", "common", "Deal 1 damage to a minion and give it +2 Attack", 0, -1, -1);
            list_.add(card);
            map_.put(InnerRage.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Innervate.class, "Innervate", "spell", "neutral", "free", "Gain 2 Mana Crystals this turn only", 0, -1, -1);
            list_.add(card);
            map_.put(Innervate.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(IronbarkProtector.class, "Ironbark Protector", "minion", "neutral", "free", "Taunt", 8, 8, 8);
            list_.add(card);
            map_.put(IronbarkProtector.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(IronbeakOwl.class, "Ironbeak Owl", "minion", "neutral", "common", "Battlecry Silence a minion", 2, 2, 1);
            list_.add(card);
            map_.put(IronbeakOwl.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(IronforgeRifleman.class, "Ironforge Rifleman", "minion", "neutral", "free", "Battlecry Deal 1 damage", 3, 2, 2);
            list_.add(card);
            map_.put(IronforgeRifleman.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(IronfurGrizzly.class, "Ironfur Grizzly", "minion", "neutral", "free", "Taunt", 3, 3, 3);
            list_.add(card);
            map_.put(IronfurGrizzly.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(JunglePanther.class, "Jungle Panther", "minion", "neutral", "common", "Stealth", 3, 4, 2);
            list_.add(card);
            map_.put(JunglePanther.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(KillCommand.class, "Kill Command", "spell", "hunter", "free", "Deal 3 damage. If you have a Beast, deal 5 damage instead", 3, -1, -1);
            list_.add(card);
            map_.put(KillCommand.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(KingKrush.class, "King Krush", "minion", "hunter", "legendary", "Charge", 9, 8, 8);
            list_.add(card);
            map_.put(KingKrush.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(KoboldGeomancer.class, "Kobold Geomancer", "minion", "neutral", "free", "Spell Damage +1", 2, 2, 2);
            list_.add(card);
            map_.put(KoboldGeomancer.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(KorkronElite.class, "Korkron Elite", "minion", "warrior", "free", "Charge", 4, 4, 3);
            list_.add(card);
            map_.put(KorkronElite.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(LayOnHands.class, "Lay on Hands", "spell", "paladin", "epic", "Restore 8 Health. Draw 3 cards", 8, -1, -1);
            list_.add(card);
            map_.put(LayOnHands.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(LeperGnome.class, "Leper Gnome", "minion", "neutral", "common", "Deathrattle Deal 2 damage to the enemy hero", 1, 2, 1);
            list_.add(card);
            map_.put(LeperGnome.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(LightsJustice.class, "Lights Justice", "weapon", "paladin", "free", "", 1, 1, -1);
            list_.add(card);
            map_.put(LightsJustice.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(LootHoarder.class, "Loot Hoarder", "minion", "neutral", "common", "Deathrattle Draw a card", 2, 2, 1);
            list_.add(card);
            map_.put(LootHoarder.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(LordOfTheArena.class, "Lord of the Arena", "minion", "neutral", "free", "Taunt", 6, 6, 5);
            list_.add(card);
            map_.put(LordOfTheArena.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MagmaRager.class, "Magma Rager", "minion", "neutral", "free", "", 3, 5, 1);
            list_.add(card);
            map_.put(MagmaRager.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Malygos.class, "Malygos", "minion", "neutral", "legendary", "Spell Damage +5", 9, 4, 12);
            list_.add(card);
            map_.put(Malygos.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MarkOfTheWild.class, "Mark of the Wild", "spell", "neutral", "free", "Give a minion Taunt and +2/+2. (+2 Attack/+2 Health)", 2, -1, -1);
            list_.add(card);
            map_.put(MarkOfTheWild.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MindBlast.class, "Mind Blast", "spell", "priest", "free", "Deal 5 damage to the enemy hero", 2, -1, -1);
            list_.add(card);
            map_.put(MindBlast.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MindControl.class, "Mind Control", "spell", "priest", "free", "Take control of an enemy minion", 10, -1, -1);
            list_.add(card);
            map_.put(MindControl.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MirrorImage.class, "Mirror Image", "spell", "mage", "free", "Summon two 0/2 minions with Taunt", 1, -1, -1);
            list_.add(card);
            map_.put(MirrorImage.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MogushanWarden.class, "Mogushan Warden", "minion", "neutral", "common", "Taunt", 4, 1, 7);
            list_.add(card);
            map_.put(MogushanWarden.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Moonfire.class, "Moonfire", "spell", "neutral", "free", "Deal 1 damage", 0, -1, -1);
            list_.add(card);
            map_.put(Moonfire.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MortalCoil.class, "Mortal Coil", "spell", "warlock", "free", "Deal 1 damage to a minion.If that kills it, draw a card", 1, -1, -1);
            list_.add(card);
            map_.put(MortalCoil.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MurlocRaider.class, "Murloc Raider", "minion", "neutral", "free", "", 1, 2, 1);
            list_.add(card);
            map_.put(MurlocRaider.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(MurlocTidehunter.class, "Murloc Tidehunter", "minion", "neutral", "common", "Battlecry Summon a 1/1 Murloc Scout", 2, 2, 1);
            list_.add(card);
            map_.put(MurlocTidehunter.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Nightblade.class, "Nightblade", "minion", "neutral", "free", "Battlecry Deal 3 damage to the enemy hero", 5, 4, 4);
            list_.add(card);
            map_.put(Nightblade.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(NorthshireCleric.class, "Northshire Cleric", "minion", "priest", "free", "Whenever a minion is healed, draw a card", 1, 1, 3);
            list_.add(card);
            map_.put(NorthshireCleric.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(NoviceEngineer.class, "Novice Engineer", "minion", "neutral", "free", "Battlecry Draw a card", 2, 1, 1);
            list_.add(card);
            map_.put(NoviceEngineer.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(OasisSnapjaw.class, "Oasis Snapjaw", "minion", "neutral", "free", "His dreams of flying and breathing fire like his idol will never be realized", 4, 2, 7);
            list_.add(card);
            map_.put(OasisSnapjaw.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(OgreMagi.class, "Ogre Magi", "minion", "neutral", "free", "Spell Damage +1", 4, 4, 4);
            list_.add(card);
            map_.put(OgreMagi.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Polymorph.class, "Polymorph", "spell", "mage", "free", "Transform a minion into a 1/1 Sheep", 4, -1, -1);
            list_.add(card);
            map_.put(Polymorph.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(PowerWordShield.class, "Power Word Shield", "spell", "priest", "free", "Give a minion +2 Health. Draw a card", 1, -1, -1);
            list_.add(card);
            map_.put(PowerWordShield.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(PriestessOfElune.class, "Priestess of Elune", "minion", "neutral", "common", "Battlecry Restore 4 Health to your hero", 6, 5, 4);
            list_.add(card);
            map_.put(PriestessOfElune.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Pyroblast.class, "Pyroblast", "spell", "mage", "epic", "Deal 10 damage", 10, -1, -1);
            list_.add(card);
            map_.put(Pyroblast.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(RagingWorgen.class, "Raging Worgen", "minion", "neutral", "common", "Enrage Windfury and +1 Attack", 3, 3, 3);
            list_.add(card);
            map_.put(RagingWorgen.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(RaidLeader.class, "Raid Leader", "minion", "neutral", "free", "Your other minions have +1 Attack", 3, 2, 2);
            list_.add(card);
            map_.put(RaidLeader.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(RavenholdtAssassin.class, "Ravenholdt Assassin", "minion", "neutral", "rare", "Stealth", 7, 7, 5);
            list_.add(card);
            map_.put(RavenholdtAssassin.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(RazorfenHunter.class, "Razorfen Hunter", "minion", "neutral", "free", "Battlecry Summon a 1/1 Boar", 3, 2, 3);
            list_.add(card);
            map_.put(RazorfenHunter.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(RecklessRocketeer.class, "Reckless Rocketeer", "minion", "neutral", "free", "Charge", 6, 5, 2);
            list_.add(card);
            map_.put(RecklessRocketeer.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(RiverCrocolisk.class, "River Crocolisk", "minion", "neutral", "free", "", 2, 2, 3);
            list_.add(card);
            map_.put(RiverCrocolisk.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(RockbiterWeapon.class, "Rockbiter Weapon", "spell", "shaman", "free", "Give a friendly character +3 Attack this turn", 1, -1, -1);
            list_.add(card);
            map_.put(RockbiterWeapon.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SacrificialPact.class, "Sacrificial Pact", "spell", "warlock", "free", "Destroy a Demon.Restore 5 Health to your hero", 0, -1, -1);
            list_.add(card);
            map_.put(SacrificialPact.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Sap.class, "Sap", "spell", "rogue", "free", "Return an enemy minion to your opponents hand", 2, -1, -1);
            list_.add(card);
            map_.put(Sap.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SavageRoar.class, "Savage Roar", "spell", "neutral", "free", "Give your characters +2 Attack this turn", 3, -1, -1);
            list_.add(card);
            map_.put(SavageRoar.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SavannahHighmane.class, "Savannah Highmane", "minion", "hunter", "rare", "Deathrattle Summon two 2/2 Hyenas", 6, 6, 5);
            list_.add(card);
            map_.put(SavannahHighmane.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ScarletCrusader.class, "Scarlet Crusader", "minion", "neutral", "common", "Divine Shield", 3, 3, 1);
            list_.add(card);
            map_.put(ScarletCrusader.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SenjinShieldmasta.class, "Senjin Shieldmasta", "minion", "neutral", "free", "Taunt", 4, 3, 5);
            list_.add(card);
            map_.put(SenjinShieldmasta.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ShadowBolt.class, "Shadow Bolt", "spell", "warlock", "free", "Deal 4 damage to a minion", 3, -1, -1);
            list_.add(card);
            map_.put(ShadowBolt.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ShadowWordDeath.class, "Shadow Word Death", "spell", "priest", "free", "Destroy a minion with an Attack of 5 or more", 3, -1, -1);
            list_.add(card);
            map_.put(ShadowWordDeath.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ShadowWordPain.class, "Shadow Word Pain", "spell", "priest", "free", "Destroy a minion with 3 or less Attack", 2, -1, -1);
            list_.add(card);
            map_.put(ShadowWordPain.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ShatteredSunCleric.class, "Shattered Sun Cleric", "minion", "neutral", "free", "Battlecry Give a friendly minion +1/+1", 3, 3, 2);
            list_.add(card);
            map_.put(ShatteredSunCleric.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ShieldBlock.class, "Shield Block", "spell", "warrior", "free", "Gain 5 Armor. Draw a card", 3, -1, -1);
            list_.add(card);
            map_.put(ShieldBlock.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Shieldbearer.class, "Shieldbearer", "minion", "neutral", "common", "Taunt", 1, 0, 4);
            list_.add(card);
            map_.put(Shieldbearer.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Shiv.class, "Shiv", "spell", "rogue", "free", "Deal 1 damage.Draw a card", 2, -1, -1);
            list_.add(card);
            map_.put(Shiv.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Silence.class, "Silence", "spell", "priest", "common", "Silence a minion", 0, -1, -1);
            list_.add(card);
            map_.put(Silence.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SilverHandKnight.class, "Silver Hand Knight", "minion", "neutral", "common", "Battlecry Summon a 2/2 Squire", 5, 4, 4);
            list_.add(card);
            map_.put(SilverHandKnight.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SilverbackPatriarch.class, "Silverback Patriarch", "minion", "neutral", "free", "Taunt", 3, 1, 4);
            list_.add(card);
            map_.put(SilverbackPatriarch.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SilvermoonGuardian.class, "Silvermoon Guardian", "minion", "neutral", "common", "Divine Shield", 4, 3, 3);
            list_.add(card);
            map_.put(SilvermoonGuardian.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(SinisterStrike.class, "Sinister Strike", "spell", "rogue", "free", "Deal 3 damage to the enemy hero", 1, -1, -1);
            list_.add(card);
            map_.put(SinisterStrike.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Slam.class, "Slam", "spell", "warrior", "common", "Deal 2 damage to a minion. If it survives, draw a card", 2, -1, -1);
            list_.add(card);
            map_.put(Slam.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Sprint.class, "Sprint", "spell", "rogue", "free", "Draw 4 cards", 7, -1, -1);
            list_.add(card);
            map_.put(Sprint.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Starfire.class, "Starfire", "spell", "neutral", "free", "Deal 5 damage. Draw a card", 6, -1, -1);
            list_.add(card);
            map_.put(Starfire.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(StarvingBuzzard.class, "Starving Buzzard", "minion", "hunter", "free", "Whenever you summon a Beast, draw a card", 2, 2, 1);
            list_.add(card);
            map_.put(StarvingBuzzard.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(StonetuskBoar.class, "Stonetusk Boar", "minion", "neutral", "free", "Charge", 1, 1, 1);
            list_.add(card);
            map_.put(StonetuskBoar.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(StormpikeCommando.class, "Stormpike Commando", "minion", "neutral", "free", "Battlecry Deal 2 damage", 5, 4, 2);
            list_.add(card);
            map_.put(StormpikeCommando.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(StormwindChampion.class, "Stormwind Champion", "minion", "neutral", "free", "Your other minions have +1/+1", 7, 6, 6);
            list_.add(card);
            map_.put(StormwindChampion.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(StormwindKnight.class, "Stormwind Knight", "minion", "neutral", "free", "Charge", 4, 2, 5);
            list_.add(card);
            map_.put(StormwindKnight.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(StranglethornTiger.class, "Stranglethorn Tiger", "minion", "neutral", "common", "Stealth", 5, 5, 5);
            list_.add(card);
            map_.put(StranglethornTiger.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Sunwalker.class, "Sunwalker", "minion", "neutral", "rare", "Taunt. Divine Shield", 6, 4, 5);
            list_.add(card);
            map_.put(Sunwalker.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Swipe.class, "Swipe", "spell", "neutral", "free", "Deal 4 damage to an enemy and 1 damage to all other enemies", 4, -1, -1);
            list_.add(card);
            map_.put(Swipe.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(TaurenWarrior.class, "Tauren Warrior", "minion", "neutral", "common", "Taunt.Enrage +3 Attack", 3, 2, 3);
            list_.add(card);
            map_.put(TaurenWarrior.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ThrallmarFarseer.class, "Thrallmar Farseer", "minion", "neutral", "common", "Windfury", 3, 2, 3);
            list_.add(card);
            map_.put(ThrallmarFarseer.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(TimberWolf.class, "Timber Wolf", "minion", "hunter", "free", "Your other Beasts have +1 Attack", 1, 1, 1);
            list_.add(card);
            map_.put(TimberWolf.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(TotemicMight.class, "Totemic Might", "spell", "shaman", "free", "Give your Totems +2 Health", 0, -1, -1);
            list_.add(card);
            map_.put(TotemicMight.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(UnstableGhoul.class, "Unstable Ghoul", "minion", "neutral", "common", "Taunt. Deathrattle Deal 1 damage to all minions", 2, 1, 3);
            list_.add(card);
            map_.put(UnstableGhoul.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(VioletTeacher.class, "Violet Teacher", "minion", "neutral", "rare", "Whenever you cast a spell, summon a 1/1 Violet Apprentice", 4, 3, 5);
            list_.add(card);
            map_.put(VioletTeacher.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Voidwalker.class, "Voidwalker", "minion", "warlock", "free", "Taunt", 1, 1, 3);
            list_.add(card);
            map_.put(Voidwalker.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(VoodooDoctor.class, "Voodoo Doctor", "minion", "neutral", "free", "Battlecry Restore 2 Health", 1, 2, 1);
            list_.add(card);
            map_.put(VoodooDoctor.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(WarGolem.class, "War Golem", "minion", "neutral", "free", "", 7, 7, 7);
            list_.add(card);
            map_.put(WarGolem.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(WaterElemental.class, "Water Elemental", "minion", "mage", "free", "Freeze any character damaged by this minion", 4, 3, 6);
            list_.add(card);
            map_.put(WaterElemental.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Whirlwind.class, "Whirlwind", "spell", "warrior", "free", "Deal 1 damage to ALL minions", 1, -1, -1);
            list_.add(card);
            map_.put(Whirlwind.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(WildGrowth.class, "Wild Growth", "spell", "neutral", "free", "Gain an empty Mana Crystal", 2, -1, -1);
            list_.add(card);
            map_.put(WildGrowth.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Windfury.class, "Windfury", "spell", "shaman", "free", "Give a minion Windfury", 2, -1, -1);
            list_.add(card);
            map_.put(Windfury.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(WindfuryHarpy.class, "Windfury Harpy", "minion", "neutral", "common", "Windfury", 6, 4, 5);
            list_.add(card);
            map_.put(WindfuryHarpy.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Windspeaker.class, "Windspeaker", "minion", "shaman", "free", "Battlecry Give a friendly minion Windfury", 4, 3, 3);
            list_.add(card);
            map_.put(Windspeaker.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Wisp.class, "Wisp", "minion", "neutral", "common", "", 0, 1, 1);
            list_.add(card);
            map_.put(Wisp.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(Wolfrider.class, "Wolfrider", "minion", "neutral", "free", "Charge", 3, 3, 1);
            list_.add(card);
            map_.put(Wolfrider.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(WorgenInfiltrator.class, "Worgen Infiltrator", "minion", "neutral", "common", "Stealth", 1, 2, 1);
            list_.add(card);
            map_.put(WorgenInfiltrator.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(YoungDragonhawk.class, "Young Dragonhawk", "minion", "neutral", "common", "Windfury", 1, 1, 1);
            list_.add(card);
            map_.put(YoungDragonhawk.class, card);
        }
        {
            ImplementedCard card = new ImplementedCard(ZombieChow.class, "Zombie Chow", "minion", "neutral", "common", "Deathrattle Restore 5 Health to the enemy hero.", 1, 2, 3);
            list_.add(card);
            map_.put(ZombieChow.class, card);
        }
    }

    public ArrayList<ImplementedCard> getCardList() {
        return list_;
    }

    public ImplementedCard getCardForClass(Class<?> clazz) {
        return map_.get(clazz);
    }
}
